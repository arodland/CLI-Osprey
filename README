NAME

    CLI::Osprey - MooX::Options + MooX::Cmd + Sanity

VERSION

    version 0.01

SYNOPSIS

    in Hello.pm

        package Hello;
        use Moo;
        use CLI::Osprey;
    
        option 'message' => (
            is => 'ro',
            format => 's',
            doc => 'The message to display',
            default => 'Hello world!',
        );
    
        sub run {
            my ($self) = @_;
            print $self->message, "\n";
        }

    In hello.pl

        use Hello;
        Hello->new_with_options->run;

DESCRIPTION

    CLI::Osprey is a module to assist in writing commandline applications
    with M* OO modules (Moose, Moo, Mo). With it, you structure your app as
    one or more modules, which get instantiated with the commandline
    arguments as attributes. Arguments are parsed using
    Getopt::Long::Descriptive, and both long and short help messages as
    well as complete manual pages are automatically generated. An app can
    be a single command with options, or have sub-commands (like git).
    Sub-commands can be defined as modules (with options of their own) or
    as simple coderefs.

 Differences from MooX::Options

    Osprey is deliberately similar to MooX::Options, and porting an app
    that uses MooX::Options to Osprey should be fairly simple in most
    cases. However there are a few important differences:

      * Osprey is pure-perl, without any mandatory XS dependencies, meaning
      it can be used in fatpacked scripts, and other situations where you
      may need to run on diverse machines, where a C compiler and control
      over the ennvironment aren't guaranteed.

      * Osprey's support for sub-commands is built-in from the beginning.
      We think this makes for a better experience than MooX::Options +
      MooX::Cmd.

      * While MooX::Options requires an option's primary name to be the
      same as the attribute that holds it, and MooX::Cmd derives a
      sub-command's name from the name of the module that implements it,
      Osprey separates these, so that Perl identifier naming conventions
      don't dictate your command line interface.

      * Osprey doesn't use an automatic module finder (like
      Module::Pluggable) to locate modules for sub-commands; their names
      are given explicitly. This small amount of additional typing gives
      you more control and less fragility.

    There are also a few things MooX::Options has that Osprey lacks. While
    they may be added in the future, I haven't seen the need yet. Currently
    known missing feeatures are JSON options, autosplit, autorange, and
    config_from_file support.

IMPORTED METHODS

    The following methods, will be imported into a class that uses
    CLI::Osprey:

 new_with_options

    Parses commandline arguments, validates them, and calls the new method
    with the resulting parameters. Any parameters passed to
    new_with_options will also be passed to new; the prefer_commandline
    import option controls which overrides which.

 option

    The option keyword acts like has (and accepts all of the arguments that
    has does), but also registers the attribute as a commandline option.
    See "OPTION PARAMETERS" for usage.

 osprey_usage($code, @messages)

    Displays a short usage message, the same as if the app was invoked with
    the -h option. Also displays the lines of text in @messages if any are
    passed. If $code is passed a defined value, exits with that as a
    status.

 osprey_help($code)

    Displays a more substantial usage message, the same as if the app was
    invoked with the --help option. If $code is passed a defined value,
    exits with that as a status.

 osprey_man

    Displays a manual page for the app, containing long descriptive text
    (if provided) about each command and option, then exits.

IMPORT PARAMETERS

    The parameters to use CLI::Osprey serve two roles: to customize
    Osprey's behavior, and to provide information about the app and its
    options for use in the usage messages. They are:

 abbreviate

    Default: true.

    If abbreviate is set to a true value, then long options can be
    abbreviated to the point of uniqueness. That is, --long-option-name can
    be called as --lon as long as there are no other options starting with
    those letters. An option can always be called by its full name, even if
    it is a prefix of some longer option's name. If abbreviate is false,
    options must always be called by their full names (or by a defined
    short name).

 added_order

    Default: true.

    If added_order is set to a true value, then two options with the same
    order (or none at all) will appear in the help text in the same order
    as their option keywords were executed. If it is false, they will
    appear in alphabetical order instead.

 getopt_options

    Default: ['require_order'].

    Contains a list of options to control option parsing behavior (see
    "Configuring Getopt::Long" in Getopt::Long). Note, however, that many
    of these are not helpful with Osprey, and that using permute will
    likely break subcommands entirely. MooX::Options calls this parameter
    flavour.

 prefer_commandline

    Default: false.

    If true, command-line options override key/value pairs passed to
    new_with_options. If false, the reverse is true.

 protect_argv

    Default: false.

    If true, the @ARGV array will be localized for the duration of
    new_with_options, and will be left in the same state after option
    parsing as it was before. If false, the @ARGV array will be modified by
    option parsing, removing any recognized options, values, and
    subcommands, and leaving behind any positional parameters or anything
    after and including a -- separator.

 usage_string

    Default: "USAGE: $program_name %o"

    Provides the header of the usage message printed in response to the -h
    option or an error in option processing. The format of the string is
    described in "$usage_desc" in Getopt::Long::Descriptive.

THANKS

    This module is based heavily on code from MooX::Options and takes
    strong inspiration from MooX::Cmd and MooX::Options::Actions. Thanks to
    celogeek, Jens Reshack, Getty, Tom Bloor, and all contributors to those
    modules. Thanks to mst for prodding me to do this. Thanks Grinnz for
    helping me update my dzillage.

AUTHOR

    Andrew Rodland <arodland@cpan.org>

COPYRIGHT AND LICENSE

    This software is copyright (c) 2017 by Andrew Rodland.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

